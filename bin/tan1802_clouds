#!/usr/bin/env python3
'''Extract cloud types from a TAN1802 weather report.

Usage: tan1802_clouds INPUT OUTPUT

Arguments:

  INPUT   Input file (CSV).
  OUTPUT  Output file (NetCDF).
'''

import sys
import warnings
import numpy as np
import ds_format as ds
import aquarius_time as aq

CLOUD_TYPES = {
	'Ci': 1,
	'Ns': 9 + 2,
	'As': 9 + 1,
	'Ac': 9 + 3,
	'St': 18 + 6,
	'Sc': 18 + 4,
	'Cu': 18 + 1,
	'fog': 27 + 0,
	'rain': 27 + 1,
	'snow': 27 + 2,
}

def transform(high, mid, low, events):
	n = len(high)
	cloud_types = np.zeros((n, 30), np.byte)
	cloud_types_n = np.zeros((n, 30), np.byte)
	for i in range(n):
		clouds = []
		clouds += [s.strip() for s in high[i].split(',')]
		clouds += [s.strip() for s in mid[i].split(',')]
		clouds += [s.strip() for s in low[i].split(',')]
		clouds += [s.lower().strip() for s in events[i].split(',')]
		clouds = ['rain' if s == 'drizzle' else s for s in clouds]
		clouds_set = set(clouds)
		for x in clouds:
			if x == '-':
				continue
			j = CLOUD_TYPES.get(x)
			if j is None:
				warnings.warn('ignoring %s' % x)
				continue
			cloud_types[i,j] = 1
			k = (j//9)*9
			cloud_types_n[i,k:] = 1
		if not (set(['St', 'Sc', 'Ns', 'As', 'rain', 'snow', 'fog']) & clouds_set):
			cloud_types_n[i,:9] = np.maximum(cloud_types_n[i,:9], 1)
		if not (set(['St', 'Sc', 'rain', 'snow', 'fog']) & clouds_set):
			cloud_types_n[i,9:18] = np.maximum(cloud_types_n[i,9:18], 1)
		if not (set(['rain', 'snow', 'fog']) & clouds_set):
			cloud_types_n[i,18:27] = np.maximum(cloud_types_n[i,18:27], 1)
		cloud_types_n[i,27:] = 1
	return cloud_types, cloud_types_n

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	output = sys.argv[2]

	d = ds.read(input_)

	cloud_types, cloud_types_n = transform(
		d['Cloud High'],
		d['Cloud Medium'],
		d['Cloud Low'],
		d['Events (precipitation, fog, ï¿½)'],
	)

	ds.write(output, {
		'time': aq.from_iso(d['Time (UTC)']),
		'cloud_types': cloud_types,
		'cloud_types_n': cloud_types_n,
		'.': {
			'time': {
				'.dims': ['time'],
				'long_name': 'time',
				'units': ds.drivers.netcdf.JD_UNITS,
				'calendar': ds.drivers.netcdf.JD_CALENDAR,
			},
			'cloud_types': {
				'.dims': ['time', 'cloud_type'],
				'long_name': 'number of positive cloud type observations',
			},
			'cloud_types_n': {
				'.dims': ['time', 'cloud_type'],
				'long_name': 'total number of cloud type observations',
			},
		}
	})
