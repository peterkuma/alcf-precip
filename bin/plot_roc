#!/usr/bin/env python3
'''Plot ROC curve from ANN results.

Usage: plot_roc INPUT OUTPUT

Arguments:

  INPUT   Input file - the output of ann_simple apply (NetCDF).
  OUTPUT  Output plot (PDF).
'''

import sys
import numpy as np
import ds_format as ds
import matplotlib.pyplot as plt
import matplotlib as mpl

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
#mpl.rc('axes', grid=True)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)
mpl.rc('grid', color='k')
mpl.rc('grid', alpha=0.2)
mpl.rc('grid', lw=0.1)

COLORS = ['#0084C8']

def calc(true, pred, p, print_=False):
	x = pred > p
	tp = np.sum(true & x)
	tn = np.sum((~true) & (~x))
	fp = np.sum((~true) & x)
	fn = np.sum(true & (~x))
	sensitivity = tp/(tp + fn)
	specificity = tn/(tn + fp)
	#if print_:
	#	print(tp, tn, fp, fn, len(x))
	return sensitivity, specificity, tp, tn, fp, fn

def calc_auc(x, y):
	xd = np.diff(x)
	yavg = (y[1:] + y[:-1])*0.5
	return np.sum(xd*yavg)

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	output = sys.argv[2]

	d = ds.read(input_)

	true = (d['label'] == 1) | (d['label'] == 2)
	pred = d['pred'][:,1] + d['pred'][:,2]
	m = len(d['label'])

	pp = np.linspace(0, 1, 100)
	n = len(pp)
	x = np.full(n, np.nan, np.float64)
	y = np.full(n, np.nan, np.float64)
	tp = np.full(n, np.nan, np.float64)
	tn = np.full(n, np.nan, np.float64)
	fp = np.full(n, np.nan, np.float64)
	fn = np.full(n, np.nan, np.float64)
	for i, p in enumerate(pp):
		y[i], x[i], tp[i], tn[i], fp[i], fn[i] = calc(true, pred, p)
	i = np.argmin((fp - fn)**2)
	auc = calc_auc(x, y)
	print(x[i], y[i], (tp[i] + fp[i])/m, (tp[i] + fn[i])/m, pp[i])
	print(auc)
	plt.plot(x*100, y*100, color=COLORS[0], lw=1)
	plt.scatter(x[i]*100, y[i]*100, color='k')
	plt.plot([x[i]*100, 100], [y[i]*100, y[i]*100],
		color='k',
		linestyle='dotted'
	)
	plt.text(100 - (1 - x[i])*100/2, y[i]*100 + 1, '%d%%' % (y[i]*100),
		ha='center'
	)
	plt.plot([x[i]*100, x[i]*100], [0, y[i]*100],
		color='k',
		linestyle='dotted'
	)
	plt.text(x[i]*100 - 1, y[i]*100/2, '%d%%' % (x[i]*100),
		ha='left'
	)

	plt.text(0.99, 0.015, 'AUC = %d%%' % (auc*100),
		transform=plt.gca().transAxes,
		ha='right'
	)
	plt.xlim(0, 100)
	plt.gca().invert_xaxis()
	plt.xlabel('Specificity (%)')
	plt.ylabel('Sensitivity (%)')
	plt.ylim(0, 100)
	plt.plot([1, 0], [0, 1], color='k', linestyle='dashed', lw=0.5)
	plt.gca().set_aspect('equal')
	plt.title('Receiver operating characteristic (ROC)')
	plt.savefig(output, bbox_inches='tight')
