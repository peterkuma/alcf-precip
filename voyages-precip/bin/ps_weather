#!/usr/bin/env python3
'''Calculate precipitation intervals from RV Polarstern weather data.

Usage: ps_weather INPUT OUTPUT

Arguments:

  INPUT   TAN1802 weather data (CSV).
  OUTPUT  Output file (NetCDF).
'''

import sys
import numpy as np
import ds_format as ds
import aquarius_time as aq

if __name__ == '__main__':
	if len(sys.argv) != 3:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	input_ = sys.argv[1]
	output = sys.argv[2]

	d = ds.read(input_)

	time = aq.from_iso(d['Date/Time'])
	ww = d['ww [code]']
	n = ds.dim(d, 'i')
	precip = []
	avail = []

	minute = 1/60/24
	for i in range(n):
		t1 = time[i] - 30*minute
		t2 = time[i] + 30*minute
		if ww[i] >= 50 and ww[i] <= 99:
			precip += [[t1, t2]]
		if not np.ma.is_masked(ww[i]):
		 	avail += [[t1, t2]]

	ds.write(output, {
		'precip': np.array(precip),
		'avail': np.array(avail),
		'.': {
			'precip': {
				'.dims': ['precip', 'bnds'],
				'long_name': 'precipitation time periods',
				'units': ds.drivers.netcdf.JD_UNITS,
				'calendar': ds.drivers.netcdf.JD_CALENDAR,
			},
			'avail': {
				'.dims': ['avail', 'bnds'],
				'long_name': 'available time periods',
				'units': ds.drivers.netcdf.JD_UNITS,
				'calendar': ds.drivers.netcdf.JD_CALENDAR,
			},
		}
	})
