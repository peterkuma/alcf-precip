#!/usr/bin/env python3
'''Plot multiple sources of precipitation data.

Usage: plot_sources [NAME INPUT]... START END OUTPUT TITLE

Arguments:

  NAME    Source name.
  INPUT   Input file (NetCDF).
  START   Start date (ISO) or an empty string ("") for automatic.
  END	  End date (ISO) or an empty string ("") for automatic.
  OUTPUT  Output plot (PDF).
  TITLE   Plot title.
'''

import sys
import numpy as np
import ds_format as ds
import aquarius_time as aq
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.lines as mlines
from matplotlib.colors import ListedColormap
import matplotlib as mpl

mpl.rc('font', family='Open Sans')
mpl.rc('axes', linewidth=0.3)
mpl.rc('lines', linewidth=1.2)
mpl.rc('xtick.major', width=0.3)
mpl.rc('ytick.major', width=0.3)
mpl.rc('legend', framealpha=1)
mpl.rc('legend', facecolor='#eeeeee')
mpl.rc('legend', edgecolor='none')
mpl.rc('legend', fancybox=False)
mpl.rc('legend', fontsize=8)

COLORS = ['#ffffff', '#ff4a4a', '#2b7fff']

if __name__ == '__main__':
	if len(sys.argv) < 7 or len(sys.argv) % 2 != 1:
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	names = sys.argv[1:-4:2]
	input_ = sys.argv[2:-4:2]
	start = aq.from_iso(sys.argv[-4])
	end = aq.from_iso(sys.argv[-3])
	output = sys.argv[-2]
	title = sys.argv[-1]

	fig = plt.figure(figsize=(8, 1.2))
	cmap = ListedColormap(COLORS)

	t1 = np.inf
	t2 = -np.inf

	for filename in input_:
		d = ds.read(filename)
		t1 = min(t1,
			np.min(d['avail']) if 'avail' in d else np.inf,
			np.min(d['missing']) if 'missing' in d else np.inf,
			np.min(d['precip']) if 'precip' in d else np.inf,
		)
		t2 = max(t2,
			np.max(d['avail']) if 'avail' in d else -np.inf,
			np.max(d['missing']) if 'missing' in d else -np.inf,
			np.max(d['precip']) if 'precip' in d else -np.inf,
		)
	
	if start is not None: t1 = max(t1, start)
	if end is not None: t2 = min(t2, end)

	m = len(names)
	i = 0
	for name, filename in zip(names, input_):
		plt.subplot(len(names), 1, i + 1)
		d = ds.read(filename)
		minute = 1/(24*60)
		n = int(np.ceil((t2 - t1)/minute))
		x = np.zeros(n, np.byte)
		def idx(t):
			return int(np.round((t - t1)/minute))
		if 'avail' in d:
			for period in d['avail']:
				x[idx(period[0]):idx(period[1])] = 1
		if 'missing' in d:
			for period in d['missing']:
				x[idx(period[0]):idx(period[1])] = 0
		if 'precip' in d:
			for period in d['precip']:
				x[idx(period[0]):idx(period[1])] = 2
		plt.ylabel(name, rotation=0, ha='right', va='center')
		plt.gca().yaxis.set_label_coords(-0.01,0.5)
		plt.imshow(x.reshape(1, n),
			aspect=1,
			cmap=cmap,
			extent=[aq.to_datetime(t1), aq.to_datetime(t2), 0, 1],
			vmin=0,
			vmax=2,
			interpolation='nearest',
		)
		plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=1))
		plt.gca().set_aspect('auto')
		#plt.gca().tick_params(axis='x', labelrotation=90)
		plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%y-%m-%d'))
		plt.gca().set_yticks([])
		if i != m - 1:
			plt.gca().set_xticklabels([])
		i += 1
	r = [
		mlines.Line2D([], [], marker='s', markersize=5, linewidth=0, color=col)
		for col in COLORS
	]

	#plt.xlabel('Time (UTC)')
	labels = ['N/A', 'dry', 'precipitation']
	#fig.legend(
	#	handles=r,
	#	labels=labels,
	#	loc='upper center',
	#	fontsize=7,
	#	ncol=3,
	#	bbox_to_anchor=(0.752, 1.17, 0, 0),
	#)
	plt.subplots_adjust(hspace=0)
	plt.suptitle(title, y=1.05)
	plt.savefig(output, bbox_inches='tight', dpi=300)
