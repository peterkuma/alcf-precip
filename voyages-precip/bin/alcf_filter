#!/usr/bin/env python3
'''Create ALCF filter from precipitation.

Usage: alcf_filter [PRECIP] TRACK LAT OUTPUT

Arguments:

  PRECIP  Input file - the output of precip_lidar_ann (NetCDF).
  TRACK   Input file with a voyage track (NetCDF).
  LAT     Northern latitude limit (degrees North).
  OUTPUT  Output file to be used with the filter_include alcf stats option (NetCDF).
'''

import sys
import numpy as np
import aquarius_time as aq
import ds_format as ds

def mask_to_intervals(mask, time):
	ii = np.where(mask)[0]
	if len(ii) == 0:
		return []
	mask2 = np.diff(ii)	> 1
	jj = np.where(mask2)[0]
	intervals = []
	i1 = ii[0]
	for j in jj:
		i2 = ii[j]
		intervals += [[time[i1], time[i2]]]
		i1 = ii[j+1]
	intervals += [[time[i1], time[ii[-1]]]]
	return intervals

if __name__ == '__main__':
	if len(sys.argv) not in (4, 5):
		sys.stderr.write(sys.modules[__name__].__doc__)
		sys.exit(1)
	precip = sys.argv[1] if len(sys.argv) == 5 else None
	track = sys.argv[-3]
	lat = float(sys.argv[-2])
	output = sys.argv[-1]
	d_precip = ds.read(precip) if precip is not None else None
	d_track = ds.read(track)
	track_mask = d_track['lat'] < lat
	track_intervals = mask_to_intervals(track_mask, d_track['time'])

	if d_precip is None:
		t1 = d_track['time'][0]
		t2 = d_track['time'][-1]
	else:
		t1 = d_precip['avail'][0,0]
		t2 = d_precip['avail'][-1,1]
	minute = 1/24/60
	time = np.arange(t1, t2 + minute, minute)
	n = len(time)
	mask1 = np.zeros(n, bool)
	mask2 = np.zeros(n, bool)
	mask3 = np.zeros(n, bool)
	for x in track_intervals:
		m = (time >= x[0]) & (time < x[1])
		mask1[m] = 1
	if d_precip is not None:
		for x in d_precip['avail']:
			m = (time >= x[0]) & (time < x[1])
			mask2[m] = 1
		for x in d_precip['precip']:
			m = (time >= x[0]) & (time < x[1])
			mask3[m] = 1
		mask = mask1 & mask2 & (~mask3)
	else:
		mask = mask1
	print(np.mean(mask))
	time_bnds = mask_to_intervals(mask, time)

	ds.write(output, {
		'time_bnds': time_bnds,
		'.': {
			'time_bnds': {
				'.dims': ['time', 'bnds'],
				'long_name': 'time bounds',
				'units': ds.drivers.netcdf.JD_UNITS,
				'calendar': ds.drivers.netcdf.JD_CALENDAR,
			},
		},
	})
